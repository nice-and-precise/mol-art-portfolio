---
/**
 * ImageGallery Component
 *
 * Displays pottery detail images as clickable thumbnails
 * Opens lightbox viewer on click
 *
 * Features:
 * - Responsive grid layout
 * - Lazy loading for performance
 * - Keyboard accessible
 * - Touch-friendly for mobile
 */

import type { LightboxImage } from '../scripts/lightbox';

interface Props {
  images: string[]; // Array of image paths from detailImages
  mainImage: string; // Main image (shown first)
  title: string; // For alt text and captions
}

const { images, mainImage, title } = Astro.props;

// Get base URL for proper path resolution
const base = import.meta.env.BASE_URL || '/';

// Helper to ensure paths work with base URL
// Image paths from content collections are relative (e.g., './images/piece.jpg')
// We need to resolve them relative to the base URL
function resolveImagePath(imagePath: string): string {
  // If it's already an absolute URL, return as-is
  if (imagePath.startsWith('http://') || imagePath.startsWith('https://') || imagePath.startsWith('/')) {
    return imagePath;
  }

  // For relative paths, they'll be resolved by Astro during build
  // But we need to ensure the final output includes the base URL
  // Since Astro processes these at build time, we just return them
  return imagePath;
}

// Combine main image + detail images for lightbox
const allImages: LightboxImage[] = [
  {
    src: resolveImagePath(mainImage),
    alt: `${title} - main view`,
    caption: `${title} - Main view`,
  },
  ...images.map((img, index) => ({
    src: resolveImagePath(img),
    alt: `${title} - detail ${index + 1}`,
    caption: `${title} - Detail ${index + 1}`,
  })),
];
---

<div class="image-gallery-container" id="image-gallery">
  <!-- Thumbnail Grid -->
  <div class="image-gallery">
    <h2 class="gallery-heading font-serif text-2xl font-bold mb-6" style="color: var(--text-title)">
      Image Gallery
    </h2>

    <div class="thumbnail-grid grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
      {allImages.map((image, index) => (
        <button
          class="thumbnail-button group relative aspect-square overflow-hidden rounded-lg focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#9c8671] focus-visible:ring-offset-2"
          data-lightbox-index={index}
          aria-label={`View ${image.alt}`}
          type="button"
        >
          <!-- Thumbnail Image -->
          <img
            src={image.src}
            alt={image.alt}
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
            loading="lazy"
          />

          <!-- Hover Overlay -->
          <div class="thumbnail-overlay absolute inset-0 bg-black opacity-0 group-hover:opacity-30 transition-opacity duration-300"></div>

          <!-- Zoom Icon (on hover) -->
          <div class="thumbnail-icon absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="32"
              height="32"
              viewBox="0 0 24 24"
              fill="none"
              stroke="white"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              aria-hidden="true"
            >
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
              <line x1="11" y1="8" x2="11" y2="14"></line>
              <line x1="8" y1="11" x2="14" y2="11"></line>
            </svg>
          </div>
        </button>
      ))}
    </div>
  </div>

  <!-- Lightbox Modal (Hidden by default) -->
  <div
    class="lightbox fixed inset-0 z-50 hidden"
    aria-hidden="true"
    role="dialog"
    aria-modal="true"
    aria-label="Image lightbox viewer"
  >
    <!-- Backdrop -->
    <div class="lightbox-backdrop absolute inset-0 bg-black"></div>

    <!-- Content -->
    <div class="lightbox-content relative z-10 flex items-center justify-center h-full px-4 sm:px-8 md:px-16">
      <!-- Close Button -->
      <button
        class="lightbox-close absolute top-4 right-4 sm:top-8 sm:right-8 w-12 h-12 flex items-center justify-center rounded-full bg-black bg-opacity-50 text-white hover:bg-opacity-75 transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white z-20"
        aria-label="Close lightbox"
        type="button"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>

      <!-- Previous Button -->
      <button
        class="lightbox-prev absolute left-2 sm:left-8 w-12 h-12 sm:w-16 sm:h-16 flex items-center justify-center rounded-full bg-black bg-opacity-50 text-white hover:bg-opacity-75 transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white"
        aria-label="Previous image"
        type="button"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="32"
          height="32"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <path d="m15 18-6-6 6-6"></path>
        </svg>
      </button>

      <!-- Image Container -->
      <div class="lightbox-image-container max-w-[90vw] max-h-[80vh] flex flex-col items-center">
        <!-- Loading Spinner -->
        <div class="lightbox-loading absolute inset-0 flex items-center justify-center" style="display: none">
          <div class="loading-spinner w-12 h-12 border-4 border-white border-t-transparent rounded-full animate-spin"></div>
        </div>

        <img
          class="lightbox-image max-w-full max-h-[70vh] object-contain rounded-lg"
          src=""
          alt=""
        />

        <!-- Image Counter -->
        <div
          class="lightbox-counter mt-4 px-4 py-2 rounded-full bg-black bg-opacity-50 text-white text-sm font-medium"
          role="status"
          aria-live="polite"
        >
          <span class="current-index">1</span> / <span class="total-images">1</span>
        </div>

        <!-- Caption -->
        <div
          class="lightbox-caption mt-2 text-center text-white text-lg max-w-2xl"
          style="display: none"
        ></div>

        <!-- Screen Reader Announcements -->
        <div
          class="sr-only"
          role="status"
          aria-live="polite"
          aria-atomic="true"
        ></div>
      </div>

      <!-- Next Button -->
      <button
        class="lightbox-next absolute right-2 sm:right-8 w-12 h-12 sm:w-16 sm:h-16 flex items-center justify-center rounded-full bg-black bg-opacity-50 text-white hover:bg-opacity-75 transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white"
        aria-label="Next image"
        type="button"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="32"
          height="32"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <path d="m9 18 6-6-6-6"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<style>
  /* Lightbox Overlay */
  .lightbox {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .lightbox.active {
    display: block;
    opacity: 1;
    pointer-events: all;
  }

  .lightbox-backdrop {
    opacity: 0.9;
  }

  /* Lightbox Image Animation */
  .lightbox-image {
    animation: lightboxZoomIn 0.3s ease-out;
  }

  @keyframes lightboxZoomIn {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Loading Spinner */
  .lightbox-loading {
    z-index: 5;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* Image Counter */
  .lightbox-counter {
    backdrop-filter: blur(8px);
    animation: fadeInUp 0.3s ease-out 0.2s both;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Screen Reader Only */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  /* Thumbnail hover effects */
  .thumbnail-button {
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .thumbnail-button:active {
    transform: scale(0.98);
  }

  .thumbnail-button:focus-visible {
    outline: 2px solid var(--color-accent, #9c8671);
    outline-offset: 2px;
  }

  /* Lightbox Button Hover Effects */
  .lightbox-close:hover,
  .lightbox-prev:hover,
  .lightbox-next:hover {
    transform: scale(1.1);
  }

  .lightbox-close:active,
  .lightbox-prev:active,
  .lightbox-next:active {
    transform: scale(0.95);
  }

  /* Mobile responsive adjustments */
  @media (max-width: 640px) {
    .lightbox-image-container {
      max-height: 70vh;
    }

    .lightbox-caption {
      font-size: 0.875rem;
    }

    .lightbox-counter {
      font-size: 0.75rem;
      padding: 0.375rem 0.75rem;
    }
  }
</style>

<script>
  import { initLightbox, type LightboxImage } from '../scripts/lightbox';

  // Get all images from data attributes
  const container = document.getElementById('image-gallery');
  if (!container) {
    console.error('Image gallery container not found');
  } else {
    // Parse images from thumbnail buttons
    const thumbnails = container.querySelectorAll('.thumbnail-button');
    const images: LightboxImage[] = Array.from(thumbnails).map((thumb) => {
      const img = thumb.querySelector('img');
      const src = img?.src || '';
      console.log('Lightbox image src:', src);
      return {
        src,
        alt: img?.alt || '',
        caption: img?.alt || '',
      };
    });

    // Get lightbox elements
    const lightboxEl = container.querySelector('.lightbox') as HTMLElement;
    const imgEl = lightboxEl?.querySelector('.lightbox-image') as HTMLImageElement;
    const captionEl = lightboxEl?.querySelector('.lightbox-caption') as HTMLElement;
    const counterEl = lightboxEl?.querySelector('.lightbox-counter') as HTMLElement;
    const currentIndexEl = counterEl?.querySelector('.current-index') as HTMLElement;
    const totalImagesEl = counterEl?.querySelector('.total-images') as HTMLElement;
    const loadingEl = lightboxEl?.querySelector('.lightbox-loading') as HTMLElement;
    const srAnnouncementEl = lightboxEl?.querySelector('.sr-only') as HTMLElement;

    // Set total images
    if (totalImagesEl) {
      totalImagesEl.textContent = images.length.toString();
    }

    let currentIndex = 0;

    // Update lightbox display
    function updateLightbox(index: number) {
      currentIndex = index;
      const image = images[index];

      if (!image || !imgEl) return;

      // Show loading state
      if (loadingEl) loadingEl.style.display = 'flex';
      if (imgEl) imgEl.style.opacity = '0';

      // Update counter
      if (currentIndexEl) {
        currentIndexEl.textContent = (index + 1).toString();
      }

      // Update image
      imgEl.src = image.src;
      imgEl.alt = image.alt;

      // Handle image load
      imgEl.onload = () => {
        if (loadingEl) loadingEl.style.display = 'none';
        if (imgEl) imgEl.style.opacity = '1';
      };

      // Handle image error
      imgEl.onerror = () => {
        console.error(`Failed to load image: ${image.src}`);
        if (loadingEl) loadingEl.style.display = 'none';
        if (imgEl) imgEl.style.opacity = '1';
        // Show a placeholder or error message
        imgEl.alt = `Failed to load: ${image.alt}`;
      };

      // Fallback timeout in case image never loads or errors
      setTimeout(() => {
        if (loadingEl && loadingEl.style.display !== 'none') {
          console.warn(`Image load timeout for: ${image.src}`);
          if (loadingEl) loadingEl.style.display = 'none';
          if (imgEl) imgEl.style.opacity = '1';
        }
      }, 5000);

      // Update caption
      if (captionEl) {
        if (image.caption) {
          captionEl.textContent = image.caption;
          captionEl.style.display = 'block';
        } else {
          captionEl.style.display = 'none';
        }
      }

      // Announce to screen readers
      if (srAnnouncementEl) {
        srAnnouncementEl.textContent = `Image ${index + 1} of ${images.length}: ${image.alt}`;
      }
    }

    // Initialize lightbox with state change callback
    const lightbox = initLightbox('image-gallery', images, (state) => {
      if (state.isOpen) {
        updateLightbox(state.currentIndex);
      }
    });

    // Handle thumbnail clicks
    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener('click', () => {
        if (lightboxEl) {
          lightboxEl.classList.add('active');
          lightboxEl.setAttribute('aria-hidden', 'false');
          updateLightbox(index);
        }
      });
    });

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      lightbox.destroy();
    });
  }
</script>
