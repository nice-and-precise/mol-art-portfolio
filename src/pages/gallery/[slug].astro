---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PieceMetadata from '../../components/PieceMetadata.astro';
import ImageGallery from '../../components/ImageGallery.astro';

export async function getStaticPaths() {
  const pieces = await getCollection('pieces');
  return pieces.map((piece) => ({
    params: { slug: piece.slug },
    props: { piece },
  }));
}

const { piece } = Astro.props;
const { Content } = await piece.render();

// Format date for display
const formattedDate = piece.data.date.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

// Generate SEO metadata
const pageTitle = `${piece.data.title} - Mol_Art`;
const metaDescription = piece.data.description.length > 160
  ? piece.data.description.substring(0, 157) + '...'
  : piece.data.description;
---

<BaseLayout title={pageTitle} description={metaDescription}>
  <article class="detail-page min-h-screen py-16">
    <div class="max-w-[1200px] mx-auto px-6">
      <!-- Back to Gallery Link -->
      <nav class="mb-8" aria-label="Breadcrumb">
        <a
          href={`${import.meta.env.BASE_URL}/gallery`}
          class="inline-flex items-center gap-2 text-base transition-colors duration-200 hover:opacity-70"
          style="color: var(--text-body)"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            aria-hidden="true"
          >
            <path d="m15 18-6-6 6-6"/>
          </svg>
          Back to Gallery
        </a>
      </nav>

      <!-- Hero Image -->
      <div class="hero-section mb-12">
        <div class="aspect-video w-full overflow-hidden rounded-2xl relative">
          <!-- Skeleton Loader -->
          <div
            class="skeleton-loader absolute inset-0 rounded-2xl"
            aria-label="Loading image"
          ></div>

          <!-- Main Image -->
          <img
            src={piece.data.mainImage}
            alt={`${piece.data.title} - handcrafted pottery piece`}
            class="hero-image w-full h-full object-cover opacity-0 transition-opacity duration-500"
            onload="this.style.opacity='1'; this.previousElementSibling.style.display='none';"
          />
        </div>
      </div>

      <!-- Content Grid: Main Content + Sidebar -->
      <div class="content-grid grid grid-cols-1 lg:grid-cols-[1fr_400px] gap-12">
        <!-- Main Content -->
        <section class="main-content">
          <h1
            class="font-serif text-[2.5rem] sm:text-[3rem] leading-tight font-bold mb-6"
            style="color: var(--text-title)"
          >
            {piece.data.title}
          </h1>

          <!-- Description -->
          <div
            class="description text-lg leading-relaxed mb-8"
            style="color: var(--text-body)"
          >
            <p>{piece.data.description}</p>
          </div>

          <!-- Markdown Content -->
          <div
            class="prose prose-lg max-w-none"
            style="color: var(--text-body)"
          >
            <Content />
          </div>

          <!-- AI Description Section (if exists) -->
          {piece.data.aiDescription && piece.data.aiDescription.length > 0 && (
            <aside
              class="ai-section mt-12 p-6 rounded-xl border-2"
              style={{
                backgroundColor: 'var(--bg-card)',
                borderColor: 'var(--color-accent)',
              }}
              aria-label="AI-generated analysis"
            >
              <h2
                class="font-serif text-2xl font-bold mb-4 flex items-center gap-2"
                style="color: var(--text-title)"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  aria-hidden="true"
                >
                  <path d="M12 2a2 2 0 0 1 2 2c0 .74-.4 1.39-1 1.73V7h1a7 7 0 0 1 7 7h-1.73c.34.6.73 1.26.73 2a2 2 0 0 1-2 2c-.74 0-1.39-.4-1.73-1H14v1.27c.6.34 1 .99 1 1.73a2 2 0 0 1-2 2 2 2 0 0 1-2-2c0-.74.4-1.39 1-1.73V17H9.73A2 2 0 0 1 8 18a2 2 0 0 1-2-2c0-.74.4-1.39 1-1.73V14a7 7 0 0 1 7-7h1V5.73A2 2 0 0 1 14 4a2 2 0 0 1 2-2z"/>
                </svg>
                AI Analysis
              </h2>
              <p class="text-base leading-relaxed" style="color: var(--text-body)">
                {piece.data.aiDescription}
              </p>
            </aside>
          )}

          <!-- Image Gallery with Lightbox -->
          {piece.data.detailImages && piece.data.detailImages.length > 0 && (
            <div class="mt-12">
              <ImageGallery
                images={piece.data.detailImages}
                mainImage={piece.data.mainImage}
                title={piece.data.title}
              />
            </div>
          )}
        </section>

        <!-- Sidebar: Metadata -->
        <aside class="sidebar">
          <PieceMetadata
            date={formattedDate}
            techniques={piece.data.techniques}
            colors={piece.data.colors}
            textures={piece.data.textures}
          />
        </aside>
      </div>
    </div>
  </article>
</BaseLayout>

<style>
  /* Skeleton Loader Animation */
  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  .skeleton-loader {
    background: linear-gradient(
      90deg,
      var(--skeleton-base) 0%,
      var(--skeleton-shine) 50%,
      var(--skeleton-base) 100%
    );
    background-size: 200% 100%;
    animation: shimmer 2s linear infinite;
  }

  /* Page Animation */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .detail-page {
    animation: fadeInUp 0.6s ease-out;
  }

  /* Prose Styling for Markdown Content */
  .prose {
    line-height: 1.75;
  }

  .prose h2 {
    font-family: var(--font-serif);
    font-size: 1.75rem;
    font-weight: 700;
    color: var(--text-title);
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .prose h3 {
    font-family: var(--font-serif);
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-title);
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }

  .prose p {
    margin-bottom: 1.25rem;
  }

  .prose ul,
  .prose ol {
    margin-left: 1.5rem;
    margin-bottom: 1.25rem;
  }

  .prose li {
    margin-bottom: 0.5rem;
  }

  .prose strong {
    font-weight: 600;
    color: var(--text-title);
  }

  /* Responsive Grid */
  @media (max-width: 1024px) {
    .content-grid {
      grid-template-columns: 1fr;
    }

    .sidebar {
      order: 2;
    }
  }

  /* Hero Image Aspect Ratio on Mobile */
  @media (max-width: 640px) {
    .hero-section .aspect-video {
      aspect-ratio: 4/3;
    }
  }
</style>

<!-- Open Graph Meta Tags -->
<Fragment slot="head">
  <meta property="og:title" content={pageTitle} />
  <meta property="og:description" content={metaDescription} />
  <meta property="og:image" content={piece.data.mainImage} />
  <meta property="og:type" content="article" />
  <meta property="article:published_time" content={piece.data.date.toISOString()} />
</Fragment>
